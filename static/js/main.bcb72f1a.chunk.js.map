{"version":3,"sources":["components/Hero.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Hero","maxW","as","Box","textAlign","spacing","base","md","py","fontWeight","fontSize","sm","lineHeight","color","direction","align","alignSelf","position","colorScheme","bg","rounded","px","_hover","onClick","window","location","href","variant","size","Arrow","w","right","top","fontFamily","transform","isExternal","Component","createIcon","displayName","viewBox","path","fillRule","clipRule","d","fill","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SAeMA,E,4JACF,WACI,OACI,cAAC,IAAD,CAAWC,KAAM,MAAjB,SACJ,eAAC,IAAD,CACEC,GAAIC,IACJC,UAAW,SACXC,QAAS,CAAEC,KAAM,EAAGC,GAAI,IACxBC,GAAI,CAAEF,KAAM,GAAIC,GAAI,IAJtB,UAKE,eAAC,IAAD,CACEE,WAAY,IACZC,SAAU,CAAEJ,KAAM,MAAOK,GAAI,MAAOJ,GAAI,OACxCK,WAAY,OAHd,UAKE,cAAC,IAAD,CAAMV,GAAI,OAAQW,MAAO,YAAzB,sBAGC,uBACD,cAAC,IAAD,CAAMX,GAAI,OAAQW,MAAO,YAAzB,qCAIF,cAAC,IAAD,CAAMA,MAAO,WAAb,oMAKA,eAAC,IAAD,CACEC,UAAW,SACXT,QAAS,EACTU,MAAO,SACPC,UAAW,SACXC,SAAU,WALZ,UAME,cAAC,IAAD,CACEC,YAAa,QACbC,GAAI,YACJC,QAAS,KACTC,GAAI,EACJC,OAAQ,CACNH,GAAI,aAENI,QAAS,kBAAMC,OAAOC,SAASC,KAAO,gFARxC,sBAYA,cAAC,IAAD,CACAC,QAAS,OACTT,YAAa,OACbU,KAAM,KACNL,QAAS,kBAAMC,OAAOC,SAASC,KAAO,gCAJtC,kCAQA,eAAC,IAAD,WACE,cAAC,IAAD,CACExB,GAAI2B,EACJC,EAAG,GACHb,SAAU,WACVc,OAAQ,GACRC,IAAK,SAEP,cAAC,IAAD,CACEtB,SAAU,KACVuB,WAAY,SACZhB,SAAU,WACVc,MAAO,SACPC,IAAK,QACLE,UAAW,gBANb,6CAWJ,eAAC,IAAD,CACExB,SAAU,KACVG,MAAO,WAFT,0HAKsD,cAAC,IAAD,CAAMa,KAAK,kDAAkDb,MAAM,WAAWJ,WAAW,OAAO0B,YAAU,EAA1G,kBALtD,8D,GAxESC,aAsFbP,EAAQQ,YAAW,CACrBC,YAAa,QACbC,QAAS,YACTC,KACE,sBACEC,SAAS,UACTC,SAAS,UACTC,EAAE,oqCACFC,KAAK,mBAKE5C,IC5FA6C,MARf,WACE,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,EAAD,OCLSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YClH5BxB,M","file":"static/js/main.bcb72f1a.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport {\n    Box,\n    Heading,\n    Container,\n    Text,\n    Button,\n    Stack,\n    Icon,\n    Link,\n    useColorModeValue,\n    ExternalLinkIcon,\n    createIcon,\n  } from '@chakra-ui/react';\n\nclass Hero extends Component{\n    render(){\n        return(\n            <Container maxW={'3xl'}>\n        <Stack\n          as={Box}\n          textAlign={'center'}\n          spacing={{ base: 8, md: 14 }}\n          py={{ base: 20, md: 36 }}>\n          <Heading\n            fontWeight={600}\n            fontSize={{ base: '2xl', sm: '4xl', md: '6xl' }}\n            lineHeight={'110%'}\n            >\n            <Text as={'span'} color={'green.400'}>\n            iamaseem\n            </Text>\n             <br />\n            <Text as={'span'} color={'black.400'}>\n              My Personal Website.\n            </Text>\n          </Heading>\n          <Text color={'gray.500'}>\n          I'm constantly learning and working to make this website beautiful \n          and use full for fellow developers and beings. So please be patient. \n          And best of luck on your journey ðŸ¤—.\n          </Text>\n          <Stack\n            direction={'column'}\n            spacing={3}\n            align={'center'}\n            alignSelf={'center'}\n            position={'relative'}>\n            <Button\n              colorScheme={'green'}\n              bg={'green.400'}\n              rounded={'lg'}\n              px={6}\n              _hover={{\n                bg: 'green.500',\n              }}\n              onClick={() => window.location.href = \"https://github.com/iamaseem/iamaseem.github.io/raw/master/aseemcvupdated.pdf\"}\n              >\n              The C.V.\n            </Button>\n            <Button \n            variant={'link'} \n            colorScheme={'blue'} \n            size={'sm'}\n            onClick={() => window.location.href = \"https://github.com/iamaseem/\"}\n            >\n              or my github profile\n            </Button>\n            <Box>\n              <Icon\n                as={Arrow}\n                w={71}\n                position={'absolute'}\n                right={-71}\n                top={'10px'}\n              />\n              <Text\n                fontSize={'lg'}\n                fontFamily={'Caveat'}\n                position={'absolute'}\n                right={'-125px'}\n                top={'-15px'}\n                transform={'rotate(10deg)'}>\n                Mean time checkout my CV.\n              </Text>\n            </Box>\n          </Stack>\n          <Text\n            fontSize={'sm'}\n            color={'gray.600'}\n            >\n                This page is created using ReactJS+ChakraUI+Chakra Templates\n                The specific template I used in this project is <Link href=\"https://chakra-templates.dev/page-sections/hero\" color=\"blue.600\" fontWeight=\"bold\" isExternal>this</Link> and its \n                opensourced because sharing is caring.\n            </Text>\n        </Stack>\n      </Container>\n        )\n    }\n}\n\nconst Arrow = createIcon({\n    displayName: 'Arrow',\n    viewBox: '0 0 72 24',\n    path: (\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M0.600904 7.08166C0.764293 6.8879 1.01492 6.79004 1.26654 6.82177C2.83216 7.01918 5.20326 7.24581 7.54543 7.23964C9.92491 7.23338 12.1351 6.98464 13.4704 6.32142C13.84 6.13785 14.2885 6.28805 14.4722 6.65692C14.6559 7.02578 14.5052 7.47362 14.1356 7.6572C12.4625 8.48822 9.94063 8.72541 7.54852 8.7317C5.67514 8.73663 3.79547 8.5985 2.29921 8.44247C2.80955 9.59638 3.50943 10.6396 4.24665 11.7384C4.39435 11.9585 4.54354 12.1809 4.69301 12.4068C5.79543 14.0733 6.88128 15.8995 7.1179 18.2636C7.15893 18.6735 6.85928 19.0393 6.4486 19.0805C6.03792 19.1217 5.67174 18.8227 5.6307 18.4128C5.43271 16.4346 4.52957 14.868 3.4457 13.2296C3.3058 13.0181 3.16221 12.8046 3.01684 12.5885C2.05899 11.1646 1.02372 9.62564 0.457909 7.78069C0.383671 7.53862 0.437515 7.27541 0.600904 7.08166ZM5.52039 10.2248C5.77662 9.90161 6.24663 9.84687 6.57018 10.1025C16.4834 17.9344 29.9158 22.4064 42.0781 21.4773C54.1988 20.5514 65.0339 14.2748 69.9746 0.584299C70.1145 0.196597 70.5427 -0.0046455 70.931 0.134813C71.3193 0.274276 71.5206 0.70162 71.3807 1.08932C66.2105 15.4159 54.8056 22.0014 42.1913 22.965C29.6185 23.9254 15.8207 19.3142 5.64226 11.2727C5.31871 11.0171 5.26415 10.5479 5.52039 10.2248Z\"\n        fill=\"currentColor\"\n      />\n    ),\n  });\n\nexport default Hero","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Hero from \"./components/Hero\"\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Hero />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}